generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Problem {
  id               String      @id @default(cuid())
  wordCount        Int
  englishSentence  String
  japaneseSentence String
  japaneseReply    String
  englishReply     String
  incorrectOptions Json
  audioEnUrl       String?
  audioEnReplyUrl  String?
  audioJaUrl       String?
  imageUrl         String?
  audioReady       Boolean     @default(false)
  senderVoice      VoiceType
  senderRole       String
  receiverVoice    VoiceType
  receiverRole     String
  place            String
  
  // パターン学習用フィールド（型定義のみ、マイグレーションはまだ）
  patternId        String?
  patternSet       PatternSet? @relation(fields: [patternId], references: [id], onDelete: SetNull)
  
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  @@unique([englishSentence])
  @@index([audioReady, wordCount], map: "idx_problems_audio_ready_wordcount")
  @@map("problems")
}

enum VoiceType {
  male
  female
}

// パターン学習用モデル（型定義のみ、マイグレーションはまだ）
// パターンセット: 1つの文法パターン（例: "He is supposed to be 〇〇〇."）の情報を保持
// 3つの例文（Problem）とクイズをセットで管理
model PatternSet {
  id                   String    @id @default(cuid())
  
  // パターン情報（例: "He is supposed to be 〇〇〇."）
  patternName          String
  
  // クイズ問題
  correctAnswer        String    // 正解（例: "彼は〇〇〇はずだ。"）
  incorrectOptions     Json      // 不正解の選択肢（配列）
  
  // リレーション
  examples             Problem[] // このパターンに属する例文（Problemの配列）
  
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@map("pattern_sets")
}
