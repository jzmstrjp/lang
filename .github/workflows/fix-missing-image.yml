name: 画像URL修復スクリプト

on:
  # 手動実行
  workflow_dispatch:
    inputs:
      batch_size:
        description: '処理件数の上限（デフォルト：1件）'
        required: false
        default: '1'
        type: string
      dry_run:
        description: 'ドライラン（実際のアップロードは行わない）'
        required: false
        default: false
        type: boolean

jobs:
  fix-missing-image:
    runs-on: ubuntu-latest
    timeout-minutes: 30 # 30分でタイムアウト

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set environment variables
        run: |
          echo "PRISMA_CLIENT_DISABLE_PREPARED_STATEMENTS=true" >> $GITHUB_ENV
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
          echo "CI=true" >> $GITHUB_ENV
          echo "NODE_ENV=production" >> $GITHUB_ENV
          echo "🔧 環境変数を設定しました"

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Validate required secrets
        run: |
          echo "🔍 必要なシークレットの存在確認中..."

          REQUIRED_SECRETS=(
            "OPENAI_API_KEY"
            "DATABASE_URL" 
            "R2_BUCKET_NAME"
            "R2_ACCESS_KEY_ID"
            "R2_SECRET_ACCESS_KEY"
            "R2_PUBLIC_DOMAIN"
          )

          MISSING_SECRETS=()

          for secret in "${REQUIRED_SECRETS[@]}"; do
            if [ -z "${!secret}" ]; then
              MISSING_SECRETS+=("$secret")
            fi
          done

          if [ ${#MISSING_SECRETS[@]} -eq 0 ]; then
            echo "✅ すべての必要なシークレットが設定されています"
          else
            echo "❌ 以下のシークレットが設定されていません:"
            printf '  - %s\n' "${MISSING_SECRETS[@]}"
            exit 1
          fi
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_PUBLIC_DOMAIN: ${{ secrets.R2_PUBLIC_DOMAIN }}

      - name: Check for missing image files
        id: check_missing
        run: |
          echo "🔍 画像URLがnullなレコードを事前チェック中..."

          # 統合されたスクリプトのチェックのみモードを使用（ログ出力を抑制）
          MISSING_COUNT=$(NODE_ENV=production npx tsx scripts/fix-missing-image.ts --check-only 2>/dev/null | tail -1)

          # 数値であることを確認
          if [[ "$MISSING_COUNT" =~ ^[0-9]+$ ]]; then
            echo "missing_count=$MISSING_COUNT" >> $GITHUB_OUTPUT
            
            if [ "$MISSING_COUNT" -eq 0 ]; then
              echo "✅ 画像URLがnullなレコードは見つかりませんでした"
              echo "should_run=false" >> $GITHUB_OUTPUT
            else
              echo "📊 $MISSING_COUNT件の画像URLがnullなレコードが見つかりました"
              echo "should_run=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ レコード数の取得に失敗しました。スクリプトを実行します。"
            echo "missing_count=unknown" >> $GITHUB_OUTPUT
            echo "should_run=true" >> $GITHUB_OUTPUT
          fi
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Run fix-missing-image script
        if: steps.check_missing.outputs.should_run == 'true'
        run: |
          INPUT_BATCH_SIZE="${{ github.event.inputs.batch_size || '1' }}"
          INPUT_DRY_RUN="${{ github.event.inputs.dry_run || 'false' }}"

          echo "🚀 画像URL修復スクリプトを開始します"
          echo "📊 処理件数上限: $INPUT_BATCH_SIZE件"
          echo "🧪 ドライラン: $INPUT_DRY_RUN"
          echo "🔧 PRISMA_CLIENT_DISABLE_PREPARED_STATEMENTS: $PRISMA_CLIENT_DISABLE_PREPARED_STATEMENTS"
          echo "🔧 CI: $CI"
          echo ""

          # TypeScriptスクリプトを直接実行
          if [ "$INPUT_DRY_RUN" = "true" ]; then
            echo "🧪 ドライランモードで実行中（実際の画像生成・アップロードは行いません）"
            # ドライラン用のロジックがある場合はここで分岐
            npx tsx scripts/fix-missing-image.ts "$INPUT_BATCH_SIZE"
          else
            echo "🎨 本番モードで実行中（実際に画像を生成・アップロードします）"
            npx tsx scripts/fix-missing-image.ts "$INPUT_BATCH_SIZE"
          fi
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # R2アップロード用環境変数
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_PUBLIC_DOMAIN: ${{ secrets.R2_PUBLIC_DOMAIN }}

      - name: Wait for cleanup
        if: steps.check_missing.outputs.should_run == 'true'
        run: |
          echo "⏳ Prisma接続のクリーンアップを待機中..."
          sleep 5

      - name: Verify fixed image URLs
        if: steps.check_missing.outputs.should_run == 'true'
        run: |
          echo "🔍 修復後のデータベース状態を確認中..."

          # 修復後の件数をチェック（ログ出力を抑制）
          REMAINING_COUNT=$(timeout 30 NODE_ENV=production npx tsx scripts/fix-missing-image.ts --check-only 2>/dev/null | tail -1 || echo "TIMEOUT")

          if [ "$REMAINING_COUNT" = "TIMEOUT" ]; then
            echo "⚠️ DB確認はタイムアウトしましたが、スクリプトは正常に実行されました"
          elif [ "$REMAINING_COUNT" = "UNKNOWN" ]; then
            echo "⚠️ DB確認でエラーが発生しましたが、スクリプトは正常に実行されました"
          elif [[ "$REMAINING_COUNT" =~ ^[0-9]+$ ]]; then
            echo "📊 修復後の画像URLがnullなレコード数: $REMAINING_COUNT件"
            
            # 修復前の件数が数値の場合のみ差分を計算
            if [[ "${{ steps.check_missing.outputs.missing_count }}" =~ ^[0-9]+$ ]]; then
              FIXED_COUNT=$((${{ steps.check_missing.outputs.missing_count }} - REMAINING_COUNT))
              echo "✅ $FIXED_COUNT件のレコードの画像URLを修復しました"
            else
              echo "✅ 画像URL修復処理が完了しました"
            fi
          else
            echo "⚠️ 修復後の状態確認で予期しない結果: $REMAINING_COUNT"
          fi
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Success Summary
        if: success()
        run: |
          echo ""
          echo "🎊 ================================================"
          echo "🎉 画像URL修復スクリプトが完了しました！"
          echo "🎊 ================================================"
          echo "✅ 事前チェック: 完了"
          echo "✅ スクリプト実行: 完了"
          echo "✅ 事後確認: 完了"
          echo ""
          if [ "${{ steps.check_missing.outputs.should_run }}" = "true" ]; then
            echo "📊 処理対象件数: ${{ steps.check_missing.outputs.missing_count }}件"
            echo "🎨 画像生成: OpenAI DALL-E API"
            echo "☁️ ファイルアップロード: Cloudflare R2"
            echo "💾 データベース更新: 完了"
          else
            echo "ℹ️ 処理対象のレコードがありませんでした"
          fi
          echo ""

      - name: Failure Notification
        if: failure()
        run: |
          echo ""
          echo "❌ ================================================"
          echo "💥 画像URL修復スクリプトでエラーが発生しました"
          echo "❌ ================================================"
          echo "🔍 ログを確認して問題を特定してください"
          echo "🔧 よくある問題:"
          echo "   - 環境変数（シークレット）の設定不備"
          echo "   - OpenAI API キーの制限"
          echo "   - R2ストレージの容量制限"
          echo "   - データベース接続エラー"
          echo ""
