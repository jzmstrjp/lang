name: 問題生成とDB保存（高速版）

on:
  # 手動実行
  workflow_dispatch:
    inputs:
      problem_type:
        description: '問題のタイプ (short, medium, long)'
        required: false
        default: 'short'
        type: choice
        options:
          - short
          - medium
          - long
      without_picture:
        description: '画像なしで生成するか'
        required: false
        default: false
        type: boolean

  # 毎日午前9時（JST）に実行（UTC 0時）
  schedule:
    - cron: '0 0 * * *'

jobs:
  generate-problem:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Generate problem directly (No Server Required!)
        run: |
          # 入力パラメータを設定
          TYPE="${{ github.event.inputs.problem_type || 'short' }}"
          WITHOUT_PICTURE="${{ github.event.inputs.without_picture || 'false' }}"

          echo "🚀 問題生成を開始します（サーバー起動なし）"
          echo "📊 Type: $TYPE"
          echo "🖼️ Without Picture: $WITHOUT_PICTURE"
          echo ""

          # TypeScriptスクリプトを直接実行
          npx tsx scripts/generate-problem-direct.ts "$TYPE" "$WITHOUT_PICTURE"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Verify database entry
        run: |
          echo "🔍 データベースの確認中..."
          # Prismaクライアントを使用して最新の問題を確認
          npx tsx -e "
            import { PrismaClient } from '@prisma/client';
            
            const prisma = new PrismaClient();
            
            async function checkLatestProblem() {
              try {
                const latest = await prisma.problem.findFirst({
                  orderBy: { createdAt: 'desc' },
                  select: {
                    id: true,
                    english: true,
                    japaneseReply: true,
                    type: true,
                    createdAt: true,
                    wordCount: true,
                    genre: true,
                    nuance: true
                  }
                });
                
                if (latest) {
                  console.log('');
                  console.log('💾 ===============================================');
                  console.log('✅ 最新の問題がDBに保存されています');
                  console.log('💾 ===============================================');
                  console.log('🆔 ID:', latest.id);
                  console.log('📊 Type:', latest.type);
                  console.log('📚 English:', latest.english);
                  console.log('🗾 Japanese:', latest.japaneseReply);
                  console.log('📝 Word Count:', latest.wordCount);
                  console.log('🎭 Genre:', latest.genre);
                  console.log('💬 Nuance:', latest.nuance);
                  console.log('⏰ Created:', latest.createdAt);
                  console.log('');
                } else {
                  console.log('❌ DBに問題が見つかりません。');
                  process.exit(1);
                }
              } catch (error) {
                console.error('❌ DB確認エラー:', error);
                process.exit(1);
              } finally {
                await prisma.\$disconnect();
              }
            }
            
            (async () => {
              await checkLatestProblem();
            })().catch(error => {
              console.error('データベース確認エラー:', error);
              process.exit(1);
            });
          "
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Success Summary
        if: success()
        run: |
          echo ""
          echo "🎊 ================================================"
          echo "🎉 問題生成が完了しました！（超高速版）"
          echo "🎊 ================================================"
          echo "✅ Next.jsサーバー起動: なし（不要）"
          echo "✅ TypeScript直接実行: 成功"
          echo "✅ API関数呼び出し: 成功"  
          echo "✅ データベース保存: 成功"
          echo "✅ データベース確認: 成功"
          echo ""
          echo "⚡ 実行時間: 大幅短縮（サーバー起動待機なし）"
          echo "🚀 メモリ使用量: 削減（サーバープロセスなし）"
          echo ""
