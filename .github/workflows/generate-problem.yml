name: 問題生成とDB保存

on:
  # 手動実行
  workflow_dispatch:
    inputs:
      problem_type:
        description: '問題のタイプ (short, medium, long)'
        required: false
        default: 'short'
        type: choice
        options:
          - short
          - medium
          - long
      without_picture:
        description: '画像なしで生成するか'
        required: false
        default: false
        type: boolean

  # 毎日午前9時（JST）に実行（UTC 0時）
  schedule:
    - cron: '0 0 * * *'

jobs:
  generate-problem:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      # Next.jsビルドキャッシュを設定
      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-nextjs-

      - name: Build Next.js application
        run: npm run build
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Start Next.js server in background
        run: |
          npm run start &
          echo $! > nextjs.pid
          echo "⏳ Next.jsサーバーを起動中..."
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          PORT: 3000

      - name: Wait for server to be ready
        run: |
          echo "🔍 サーバーの起動を確認中..."
          for i in {1..60}; do
            if curl -f -s http://localhost:3000/api/problem/generate > /dev/null 2>&1; then
              echo "✅ サーバーが起動しました！"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "❌ サーバーの起動がタイムアウトしました"
              exit 1
            fi
            echo "⏳ サーバー起動待機中... ($i/60)"
            sleep 2
          done

      - name: Generate problem via API
        run: |
          # 入力パラメータを設定
          TYPE="${{ github.event.inputs.problem_type || 'short' }}"
          WITHOUT_PICTURE="${{ github.event.inputs.without_picture || 'false' }}"

          echo "🚀 問題生成を開始します"
          echo "📊 Type: $TYPE"
          echo "🖼️ Without Picture: $WITHOUT_PICTURE"

          # APIリクエストボディを作成
          BODY=$(cat <<EOF
          {
            "type": "$TYPE",
            "withoutPicture": $WITHOUT_PICTURE,
            "skipSave": false
          }
          EOF
          )

          echo "📝 APIリクエスト送信中..."

          # API呼び出し（より詳細なログ出力）
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}\n" -X POST \
            -H "Content-Type: application/json" \
            -d "$BODY" \
            http://localhost:3000/api/problem/generate)

          # HTTPステータスコードをチェック
          HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
          RESPONSE_BODY=$(echo "$RESPONSE" | grep -v "HTTP_CODE:")

          echo "📡 HTTP Status: $HTTP_CODE"

          if [ "$HTTP_CODE" != "200" ]; then
            echo "❌ HTTPエラーが発生しました"
            echo "Response: $RESPONSE_BODY"
            exit 1
          fi

          echo "📄 API Response:"
          echo "$RESPONSE_BODY" | jq . || echo "$RESPONSE_BODY"

          # レスポンスにエラーがないかチェック
          if echo "$RESPONSE_BODY" | jq -e '.error' > /dev/null 2>&1; then
            echo "❌ APIエラーが発生しました:"
            echo "$RESPONSE_BODY" | jq -r '.error'
            exit 1
          fi

          # 成功メッセージを表示
          if echo "$RESPONSE_BODY" | jq -e '.problem.english' > /dev/null 2>&1; then
            ENGLISH=$(echo "$RESPONSE_BODY" | jq -r '.problem.english')
            JAPANESE=$(echo "$RESPONSE_BODY" | jq -r '.problem.japaneseReply')
            WORD_COUNT=$(echo "$RESPONSE_BODY" | jq -r '.problem.wordCount')
            GENRE=$(echo "$RESPONSE_BODY" | jq -r '.problem.genre')
            NUANCE=$(echo "$RESPONSE_BODY" | jq -r '.problem.nuance')
            
            echo ""
            echo "🎉 ==============================================="
            echo "✅ 問題が正常に生成されました！"
            echo "🎉 ==============================================="
            echo "📚 English: $ENGLISH"
            echo "🗾 Japanese Reply: $JAPANESE"
            echo "📊 Word Count: $WORD_COUNT"
            echo "🎭 Genre: $GENRE"
            echo "💬 Nuance: $NUANCE"
            echo ""
            
            # 選択肢を表示
            echo "📝 選択肢:"
            CORRECT_INDEX=$(echo "$RESPONSE_BODY" | jq -r '.problem.correctIndex')
            OPTIONS=$(echo "$RESPONSE_BODY" | jq -r '.problem.options[]')
            i=0
            while IFS= read -r option; do
              if [ $i -eq $CORRECT_INDEX ]; then
                echo "  ✅ $((i + 1)). $option"
              else
                echo "  ❌ $((i + 1)). $option"
              fi
              i=$((i + 1))
            done <<< "$OPTIONS"
            
          else
            echo "❌ 問題の生成に失敗しました。"
            echo "Response: $RESPONSE_BODY"
            exit 1
          fi
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Stop Next.js server
        if: always()
        run: |
          if [ -f nextjs.pid ]; then
            echo "🛑 Next.jsサーバーを停止中..."
            kill $(cat nextjs.pid) || true
            rm nextjs.pid
            echo "✅ サーバーを停止しました"
          fi

      - name: Verify database entry
        run: |
          echo "🔍 データベースの確認中..."
          # Prismaクライアントを使用して最新の問題を確認
          node -e "
            const { PrismaClient } = require('@prisma/client');
            const prisma = new PrismaClient();
            
            async function checkLatestProblem() {
              try {
                const latest = await prisma.problem.findFirst({
                  orderBy: { createdAt: 'desc' },
                  select: {
                    id: true,
                    english: true,
                    japaneseReply: true,
                    type: true,
                    createdAt: true,
                    wordCount: true,
                    genre: true,
                    nuance: true
                  }
                });
                
                if (latest) {
                  console.log('');
                  console.log('💾 ===============================================');
                  console.log('✅ 最新の問題がDBに保存されています');
                  console.log('💾 ===============================================');
                  console.log('🆔 ID:', latest.id);
                  console.log('📊 Type:', latest.type);
                  console.log('📚 English:', latest.english);
                  console.log('🗾 Japanese:', latest.japaneseReply);
                  console.log('📝 Word Count:', latest.wordCount);
                  console.log('🎭 Genre:', latest.genre);
                  console.log('💬 Nuance:', latest.nuance);
                  console.log('⏰ Created:', latest.createdAt);
                  console.log('');
                } else {
                  console.log('❌ DBに問題が見つかりません。');
                  process.exit(1);
                }
              } catch (error) {
                console.error('❌ DB確認エラー:', error);
                process.exit(1);
              } finally {
                await prisma.\$disconnect();
              }
            }
            
            checkLatestProblem();
          "
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Summary
        if: success()
        run: |
          echo ""
          echo "🎊 ================================================"
          echo "🎉 問題生成が完了しました！"
          echo "🎊 ================================================"
          echo "✅ TypeScriptビルド: 成功"
          echo "✅ API呼び出し: 成功"  
          echo "✅ データベース保存: 成功"
          echo "✅ データベース確認: 成功"
          echo ""
          echo "📈 次回実行時はビルドキャッシュにより高速化されます"
          echo ""
