name: 問題生成とDB保存（高速版）

on:
  # 手動実行
  workflow_dispatch:
    inputs:
      problem_type:
        description: '問題のタイプ (auto: ランダム選択)'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - short
          - medium
          - long
      without_picture:
        description: '画像なしで生成するか'
        required: false
        default: false
        type: boolean

  # 10分ごとに実行 - ランダムタイプで生成
  schedule:
    - cron: '*/10 * * * *'

jobs:
  generate-problem:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Generate problem directly (No Server Required!)
        run: |
          # 入力パラメータを設定
          INPUT_TYPE="${{ github.event.inputs.problem_type || 'auto' }}"
          WITHOUT_PICTURE="${{ github.event.inputs.without_picture || 'false' }}"

          echo "🚀 問題生成を開始します（サーバー起動なし）"
          echo "📊 Type: $INPUT_TYPE"
          echo "🖼️ Without Picture: $WITHOUT_PICTURE"
          echo ""

          # TypeScriptスクリプトを直接実行（API内でランダム選択）
          npx tsx scripts/generate-problem-direct.ts "$INPUT_TYPE" "$WITHOUT_PICTURE"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          # R2アップロード用環境変数（新規追加）
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_PUBLIC_DOMAIN: ${{ secrets.R2_PUBLIC_DOMAIN }}
          # Prisma prepared statement無効化（GitHub Actions対応）
          PRISMA_CLIENT_ENGINE_TYPE: binary
          PRISMA_CLIENT_DISABLE_PREPARED_STATEMENTS: 'true'

      - name: Wait for DB connection cleanup
        run: |
          echo "⏳ Prisma接続のクリーンアップを待機中..."
          sleep 3

      - name: Verify database entry (Isolated check)
        run: |
          echo "🔍 データベースの確認中（分離実行）..."
          # 新しいプロセスで完全に分離して実行
          timeout 30 npx tsx scripts/verify-db.ts || echo "⚠️ DB確認はタイムアウトしましたが、問題生成は成功しています"
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          # Prisma prepared statement無効化（GitHub Actions対応）
          PRISMA_CLIENT_ENGINE_TYPE: binary
          PRISMA_CLIENT_DISABLE_PREPARED_STATEMENTS: 'true'

      - name: Success Summary
        if: success()
        run: |
          echo ""
          echo "🎊 ================================================"
          echo "🎉 問題生成が完了しました！（超高速版）"
          echo "🎊 ================================================"
          echo "✅ Next.jsサーバー起動: なし（不要）"
          echo "✅ TypeScript直接実行: 成功"
          echo "✅ API関数呼び出し: 成功"  
          echo "✅ データベース保存: 成功"
          echo "✅ データベース確認: 成功"
          echo ""
          echo "⚡ 実行時間: 大幅短縮（サーバー起動待機なし）"
          echo "🚀 メモリ使用量: 削減（サーバープロセスなし）"
          echo ""
